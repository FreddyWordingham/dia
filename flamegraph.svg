<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_m.dylib`floor (1,172 samples, 3.76%)</title><rect x="0.0161%" y="213" width="3.7643%" height="15" fill="rgb(227,0,7)"/><text x="0.2661%" y="223.50">libs..</text></g><g><title>rng`regex::re_unicode::Regex::captures (53 samples, 0.17%)</title><rect x="32.7413%" y="117" width="0.1702%" height="15" fill="rgb(217,0,24)"/><text x="32.9913%" y="127.50"></text></g><g><title>rng`&lt;F as regex::re_unicode::Replacer&gt;::replace_append (145 samples, 0.47%)</title><rect x="32.4490%" y="133" width="0.4657%" height="15" fill="rgb(221,193,54)"/><text x="32.6990%" y="143.50"></text></g><g><title>rng`&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.10%)</title><rect x="32.9179%" y="133" width="0.1028%" height="15" fill="rgb(248,212,6)"/><text x="33.1679%" y="143.50"></text></g><g><title>rng`indicatif::progress::draw_state (218 samples, 0.70%)</title><rect x="32.3366%" y="181" width="0.7002%" height="15" fill="rgb(208,68,35)"/><text x="32.5866%" y="191.50"></text></g><g><title>rng`indicatif::style::ProgressStyle::format_state (197 samples, 0.63%)</title><rect x="32.4040%" y="165" width="0.6327%" height="15" fill="rgb(232,128,0)"/><text x="32.6540%" y="175.50"></text></g><g><title>rng`regex::re_unicode::Regex::replace_all (194 samples, 0.62%)</title><rect x="32.4137%" y="149" width="0.6231%" height="15" fill="rgb(207,160,47)"/><text x="32.6637%" y="159.50"></text></g><g><title>rng`indicatif::progress::ProgressBar::inc (221 samples, 0.71%)</title><rect x="32.3334%" y="197" width="0.7098%" height="15" fill="rgb(228,23,34)"/><text x="32.5834%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (81 samples, 0.26%)</title><rect x="39.9775%" y="149" width="0.2602%" height="15" fill="rgb(218,30,26)"/><text x="40.2275%" y="159.50"></text></g><g><title>rng`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (84 samples, 0.27%)</title><rect x="39.9711%" y="165" width="0.2698%" height="15" fill="rgb(220,122,19)"/><text x="40.2211%" y="175.50"></text></g><g><title>rng`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (98 samples, 0.31%)</title><rect x="39.9711%" y="181" width="0.3148%" height="15" fill="rgb(250,228,42)"/><text x="40.2211%" y="191.50"></text></g><g><title>rng`rand_chacha::guts::refill_wide (44 samples, 0.14%)</title><rect x="40.3051%" y="181" width="0.1413%" height="15" fill="rgb(240,193,28)"/><text x="40.5551%" y="191.50"></text></g><g><title>rng`rand::Rng::gen_range (4,956 samples, 15.92%)</title><rect x="33.0464%" y="197" width="15.9178%" height="15" fill="rgb(216,20,37)"/><text x="33.2964%" y="207.50">rng`rand::Rng::gen_range</text></g><g><title>rng`rand_chacha::guts::refill_wide (2,645 samples, 8.50%)</title><rect x="40.4689%" y="181" width="8.4953%" height="15" fill="rgb(206,188,39)"/><text x="40.7189%" y="191.50">rng`rand_cha..</text></g><g><title>rng`rand_chacha::guts::refill_wide::impl_avx2 (2,645 samples, 8.50%)</title><rect x="40.4689%" y="165" width="8.4953%" height="15" fill="rgb(217,207,13)"/><text x="40.7189%" y="175.50">rng`rand_cha..</text></g><g><title>rng`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (14,083 samples, 45.23%)</title><rect x="3.8060%" y="213" width="45.2321%" height="15" fill="rgb(231,73,38)"/><text x="4.0560%" y="223.50">rng`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;..</text></g><g><title>rng`&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (15,407 samples, 49.48%)</title><rect x="0.0161%" y="229" width="49.4845%" height="15" fill="rgb(225,20,46)"/><text x="0.2661%" y="239.50">rng`&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consu..</text></g><g><title>rng`rand::Rng::gen_range (143 samples, 0.46%)</title><rect x="49.0413%" y="213" width="0.4593%" height="15" fill="rgb(210,31,41)"/><text x="49.2913%" y="223.50"></text></g><g><title>libsystem_m.dylib`floor (600 samples, 1.93%)</title><rect x="49.5006%" y="181" width="1.9271%" height="15" fill="rgb(221,200,47)"/><text x="49.7506%" y="191.50">l..</text></g><g><title>rng`&lt;F as regex::re_unicode::Replacer&gt;::replace_append (51 samples, 0.16%)</title><rect x="65.8937%" y="101" width="0.1638%" height="15" fill="rgb(226,26,5)"/><text x="66.1437%" y="111.50"></text></g><g><title>rng`indicatif::progress::draw_state (90 samples, 0.29%)</title><rect x="65.8423%" y="149" width="0.2891%" height="15" fill="rgb(249,33,26)"/><text x="66.0923%" y="159.50"></text></g><g><title>rng`indicatif::style::ProgressStyle::format_state (84 samples, 0.27%)</title><rect x="65.8616%" y="133" width="0.2698%" height="15" fill="rgb(235,183,28)"/><text x="66.1116%" y="143.50"></text></g><g><title>rng`regex::re_unicode::Regex::replace_all (82 samples, 0.26%)</title><rect x="65.8680%" y="117" width="0.2634%" height="15" fill="rgb(221,5,38)"/><text x="66.1180%" y="127.50"></text></g><g><title>rng`indicatif::progress::ProgressBar::inc (94 samples, 0.30%)</title><rect x="65.8391%" y="165" width="0.3019%" height="15" fill="rgb(247,18,42)"/><text x="66.0891%" y="175.50"></text></g><g><title>rng`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (32 samples, 0.10%)</title><rect x="69.5455%" y="133" width="0.1028%" height="15" fill="rgb(241,131,45)"/><text x="69.7955%" y="143.50"></text></g><g><title>rng`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (37 samples, 0.12%)</title><rect x="69.5359%" y="149" width="0.1188%" height="15" fill="rgb(249,31,29)"/><text x="69.7859%" y="159.50"></text></g><g><title>rng`rand::Rng::gen_range (2,492 samples, 8.00%)</title><rect x="66.1410%" y="165" width="8.0039%" height="15" fill="rgb(225,111,53)"/><text x="66.3910%" y="175.50">rng`rand::R..</text></g><g><title>rng`rand_chacha::guts::refill_wide (1,374 samples, 4.41%)</title><rect x="69.7318%" y="149" width="4.4130%" height="15" fill="rgb(238,160,17)"/><text x="69.9818%" y="159.50">rng`r..</text></g><g><title>rng`rand_chacha::guts::refill_wide::impl_avx2 (1,374 samples, 4.41%)</title><rect x="69.7318%" y="133" width="4.4130%" height="15" fill="rgb(214,148,48)"/><text x="69.9818%" y="143.50">rng`r..</text></g><g><title>rng`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (7,083 samples, 22.75%)</title><rect x="51.4437%" y="181" width="22.7493%" height="15" fill="rgb(232,36,49)"/><text x="51.6937%" y="191.50">rng`core::ops::function::impls::_&lt;im..</text></g><g><title>rng`&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (7,776 samples, 24.98%)</title><rect x="49.5006%" y="197" width="24.9751%" height="15" fill="rgb(209,103,24)"/><text x="49.7506%" y="207.50">rng`&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as..</text></g><g><title>rng`rand::Rng::gen_range (88 samples, 0.28%)</title><rect x="74.1930%" y="181" width="0.2826%" height="15" fill="rgb(229,88,8)"/><text x="74.4430%" y="191.50"></text></g><g><title>libsystem_m.dylib`floor (298 samples, 0.96%)</title><rect x="74.4757%" y="149" width="0.9571%" height="15" fill="rgb(213,181,19)"/><text x="74.7257%" y="159.50"></text></g><g><title>rng`indicatif::progress::draw_state (42 samples, 0.13%)</title><rect x="82.6112%" y="117" width="0.1349%" height="15" fill="rgb(254,191,54)"/><text x="82.8612%" y="127.50"></text></g><g><title>rng`indicatif::style::ProgressStyle::format_state (38 samples, 0.12%)</title><rect x="82.6241%" y="101" width="0.1220%" height="15" fill="rgb(241,83,37)"/><text x="82.8741%" y="111.50"></text></g><g><title>rng`regex::re_unicode::Regex::replace_all (38 samples, 0.12%)</title><rect x="82.6241%" y="85" width="0.1220%" height="15" fill="rgb(233,36,39)"/><text x="82.8741%" y="95.50"></text></g><g><title>rng`indicatif::progress::ProgressBar::inc (43 samples, 0.14%)</title><rect x="82.6112%" y="133" width="0.1381%" height="15" fill="rgb(226,3,54)"/><text x="82.8612%" y="143.50"></text></g><g><title>rng`rand::Rng::gen_range (1,269 samples, 4.08%)</title><rect x="82.7493%" y="133" width="4.0758%" height="15" fill="rgb(245,192,40)"/><text x="82.9993%" y="143.50">rng`..</text></g><g><title>rng`rand_chacha::guts::refill_wide (657 samples, 2.11%)</title><rect x="84.7150%" y="117" width="2.1102%" height="15" fill="rgb(238,167,29)"/><text x="84.9650%" y="127.50">r..</text></g><g><title>rng`rand_chacha::guts::refill_wide::impl_avx2 (657 samples, 2.11%)</title><rect x="84.7150%" y="101" width="2.1102%" height="15" fill="rgb(232,182,51)"/><text x="84.9650%" y="111.50">r..</text></g><g><title>rng`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (3,551 samples, 11.41%)</title><rect x="75.4392%" y="149" width="11.4052%" height="15" fill="rgb(231,60,39)"/><text x="75.6892%" y="159.50">rng`core::ops::fu..</text></g><g><title>rng`rayon::iter::plumbing::bridge_producer_consumer::helper (27,077 samples, 86.97%)</title><rect x="0.0161%" y="245" width="86.9664%" height="15" fill="rgb(208,69,12)"/><text x="0.2661%" y="255.50">rng`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rng`rayon_core::join::join_context::_{{closure}} (11,670 samples, 37.48%)</title><rect x="49.5006%" y="229" width="37.4819%" height="15" fill="rgb(235,93,37)"/><text x="49.7506%" y="239.50">rng`rayon_core::join::join_context::_{{closure}}</text></g><g><title>rng`rayon::iter::plumbing::bridge_producer_consumer::helper (11,670 samples, 37.48%)</title><rect x="49.5006%" y="213" width="37.4819%" height="15" fill="rgb(213,116,39)"/><text x="49.7506%" y="223.50">rng`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rng`rayon_core::join::join_context::_{{closure}} (3,894 samples, 12.51%)</title><rect x="74.4757%" y="197" width="12.5068%" height="15" fill="rgb(222,207,29)"/><text x="74.7257%" y="207.50">rng`rayon_core::joi..</text></g><g><title>rng`rayon::iter::plumbing::bridge_producer_consumer::helper (3,894 samples, 12.51%)</title><rect x="74.4757%" y="181" width="12.5068%" height="15" fill="rgb(206,96,30)"/><text x="74.7257%" y="191.50">rng`rayon::iter::pl..</text></g><g><title>rng`&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (3,894 samples, 12.51%)</title><rect x="74.4757%" y="165" width="12.5068%" height="15" fill="rgb(218,138,4)"/><text x="74.7257%" y="175.50">rng`&lt;rayon::iter::m..</text></g><g><title>rng`rand::Rng::gen_range (43 samples, 0.14%)</title><rect x="86.8444%" y="149" width="0.1381%" height="15" fill="rgb(250,191,14)"/><text x="87.0944%" y="159.50"></text></g><g><title>libsystem_m.dylib`floor (274 samples, 0.88%)</title><rect x="86.9825%" y="117" width="0.8800%" height="15" fill="rgb(239,60,40)"/><text x="87.2325%" y="127.50"></text></g><g><title>rng`&lt;F as regex::re_unicode::Replacer&gt;::replace_append (38 samples, 0.12%)</title><rect x="95.2112%" y="37" width="0.1220%" height="15" fill="rgb(206,27,48)"/><text x="95.4612%" y="47.50"></text></g><g><title>rng`indicatif::progress::ProgressBar::inc (53 samples, 0.17%)</title><rect x="95.1855%" y="101" width="0.1702%" height="15" fill="rgb(225,35,8)"/><text x="95.4355%" y="111.50"></text></g><g><title>rng`indicatif::progress::draw_state (53 samples, 0.17%)</title><rect x="95.1855%" y="85" width="0.1702%" height="15" fill="rgb(250,213,24)"/><text x="95.4355%" y="95.50"></text></g><g><title>rng`indicatif::style::ProgressStyle::format_state (51 samples, 0.16%)</title><rect x="95.1919%" y="69" width="0.1638%" height="15" fill="rgb(247,123,22)"/><text x="95.4419%" y="79.50"></text></g><g><title>rng`regex::re_unicode::Regex::replace_all (51 samples, 0.16%)</title><rect x="95.1919%" y="53" width="0.1638%" height="15" fill="rgb(231,138,38)"/><text x="95.4419%" y="63.50"></text></g><g><title>rng`rand::Rng::gen_range (1,262 samples, 4.05%)</title><rect x="95.3557%" y="101" width="4.0533%" height="15" fill="rgb(231,145,46)"/><text x="95.6057%" y="111.50">rng`..</text></g><g><title>rng`rand_chacha::guts::refill_wide (656 samples, 2.11%)</title><rect x="97.3021%" y="85" width="2.1070%" height="15" fill="rgb(251,118,11)"/><text x="97.5521%" y="95.50">r..</text></g><g><title>rng`rand_chacha::guts::refill_wide::impl_avx2 (656 samples, 2.11%)</title><rect x="97.3021%" y="69" width="2.1070%" height="15" fill="rgb(217,147,25)"/><text x="97.5521%" y="79.50">r..</text></g><g><title>rng`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (3,597 samples, 11.55%)</title><rect x="87.8722%" y="117" width="11.5529%" height="15" fill="rgb(247,81,37)"/><text x="88.1222%" y="127.50">rng`core::ops::fu..</text></g><g><title>rng`rayon::iter::plumbing::bridge_producer_consumer::helper (3,915 samples, 12.57%)</title><rect x="86.9825%" y="213" width="12.5743%" height="15" fill="rgb(209,12,38)"/><text x="87.2325%" y="223.50">rng`rayon::iter::pl..</text></g><g><title>rng`rayon_core::join::join_context::_{{closure}} (3,915 samples, 12.57%)</title><rect x="86.9825%" y="197" width="12.5743%" height="15" fill="rgb(227,1,9)"/><text x="87.2325%" y="207.50">rng`rayon_core::joi..</text></g><g><title>rng`rayon::iter::plumbing::bridge_producer_consumer::helper (3,915 samples, 12.57%)</title><rect x="86.9825%" y="181" width="12.5743%" height="15" fill="rgb(248,47,43)"/><text x="87.2325%" y="191.50">rng`rayon::iter::pl..</text></g><g><title>rng`rayon_core::join::join_context::_{{closure}} (3,915 samples, 12.57%)</title><rect x="86.9825%" y="165" width="12.5743%" height="15" fill="rgb(221,10,30)"/><text x="87.2325%" y="175.50">rng`rayon_core::joi..</text></g><g><title>rng`rayon::iter::plumbing::bridge_producer_consumer::helper (3,915 samples, 12.57%)</title><rect x="86.9825%" y="149" width="12.5743%" height="15" fill="rgb(210,229,1)"/><text x="87.2325%" y="159.50">rng`rayon::iter::pl..</text></g><g><title>rng`&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (3,915 samples, 12.57%)</title><rect x="86.9825%" y="133" width="12.5743%" height="15" fill="rgb(222,148,37)"/><text x="87.2325%" y="143.50">rng`&lt;rayon::iter::m..</text></g><g><title>rng`rand::Rng::gen_range (41 samples, 0.13%)</title><rect x="99.4251%" y="117" width="0.1317%" height="15" fill="rgb(234,67,33)"/><text x="99.6751%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (30,998 samples, 99.56%)</title><rect x="0.0000%" y="373" width="99.5600%" height="15" fill="rgb(247,98,35)"/><text x="0.2500%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (30,998 samples, 99.56%)</title><rect x="0.0000%" y="357" width="99.5600%" height="15" fill="rgb(247,138,52)"/><text x="0.2500%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rng`std::sys::unix::thread::Thread::new::thread_start (30,998 samples, 99.56%)</title><rect x="0.0000%" y="341" width="99.5600%" height="15" fill="rgb(213,79,30)"/><text x="0.2500%" y="351.50">rng`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rng`core::ops::function::FnOnce::call_once{{vtable.shim}} (30,998 samples, 99.56%)</title><rect x="0.0000%" y="325" width="99.5600%" height="15" fill="rgb(246,177,23)"/><text x="0.2500%" y="335.50">rng`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rng`std::sys_common::backtrace::__rust_begin_short_backtrace (30,998 samples, 99.56%)</title><rect x="0.0000%" y="309" width="99.5600%" height="15" fill="rgb(230,62,27)"/><text x="0.2500%" y="319.50">rng`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rng`rayon_core::registry::ThreadBuilder::run (30,998 samples, 99.56%)</title><rect x="0.0000%" y="293" width="99.5600%" height="15" fill="rgb(216,154,8)"/><text x="0.2500%" y="303.50">rng`rayon_core::registry::ThreadBuilder::run</text></g><g><title>rng`rayon_core::registry::WorkerThread::wait_until_cold (30,998 samples, 99.56%)</title><rect x="0.0000%" y="277" width="99.5600%" height="15" fill="rgb(244,35,45)"/><text x="0.2500%" y="287.50">rng`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rng`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (30,993 samples, 99.54%)</title><rect x="0.0161%" y="261" width="99.5439%" height="15" fill="rgb(251,115,12)"/><text x="0.2661%" y="271.50">rng`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rng`std::panicking::try (3,916 samples, 12.58%)</title><rect x="86.9825%" y="245" width="12.5775%" height="15" fill="rgb(240,54,50)"/><text x="87.2325%" y="255.50">rng`std::panicking:..</text></g><g><title>rng`rayon_core::join::join_context::_{{closure}} (3,916 samples, 12.58%)</title><rect x="86.9825%" y="229" width="12.5775%" height="15" fill="rgb(233,84,52)"/><text x="87.2325%" y="239.50">rng`rayon_core::joi..</text></g><g><title>libsystem_kernel.dylib`write (114 samples, 0.37%)</title><rect x="99.6274%" y="165" width="0.3661%" height="15" fill="rgb(207,117,47)"/><text x="99.8774%" y="175.50"></text></g><g><title>rng`core::fmt::Formatter::pad_formatted_parts (129 samples, 0.41%)</title><rect x="99.5825%" y="229" width="0.4143%" height="15" fill="rgb(249,43,39)"/><text x="99.8325%" y="239.50"></text></g><g><title>rng`core::fmt::Write::write_char (116 samples, 0.37%)</title><rect x="99.6242%" y="213" width="0.3726%" height="15" fill="rgb(209,38,44)"/><text x="99.8742%" y="223.50"></text></g><g><title>rng`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (116 samples, 0.37%)</title><rect x="99.6242%" y="197" width="0.3726%" height="15" fill="rgb(236,212,23)"/><text x="99.8742%" y="207.50"></text></g><g><title>rng`std::io::Write::write_all (115 samples, 0.37%)</title><rect x="99.6274%" y="181" width="0.3694%" height="15" fill="rgb(242,79,21)"/><text x="99.8774%" y="191.50"></text></g><g><title>all (31,135 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(211,96,35)"/><text x="0.2500%" y="399.50"></text></g><g><title>rng`0x1 (137 samples, 0.44%)</title><rect x="99.5600%" y="373" width="0.4400%" height="15" fill="rgb(253,215,40)"/><text x="99.8100%" y="383.50"></text></g><g><title>libdyld.dylib`start (137 samples, 0.44%)</title><rect x="99.5600%" y="357" width="0.4400%" height="15" fill="rgb(211,81,21)"/><text x="99.8100%" y="367.50"></text></g><g><title>rng`main (137 samples, 0.44%)</title><rect x="99.5600%" y="341" width="0.4400%" height="15" fill="rgb(208,190,38)"/><text x="99.8100%" y="351.50"></text></g><g><title>rng`std::rt::lang_start_internal (137 samples, 0.44%)</title><rect x="99.5600%" y="325" width="0.4400%" height="15" fill="rgb(235,213,38)"/><text x="99.8100%" y="335.50"></text></g><g><title>rng`std::rt::lang_start::_{{closure}} (137 samples, 0.44%)</title><rect x="99.5600%" y="309" width="0.4400%" height="15" fill="rgb(237,122,38)"/><text x="99.8100%" y="319.50"></text></g><g><title>rng`rng::main (137 samples, 0.44%)</title><rect x="99.5600%" y="293" width="0.4400%" height="15" fill="rgb(244,218,35)"/><text x="99.8100%" y="303.50"></text></g><g><title>rng`std::io::Write::write_fmt (135 samples, 0.43%)</title><rect x="99.5664%" y="277" width="0.4336%" height="15" fill="rgb(240,68,47)"/><text x="99.8164%" y="287.50"></text></g><g><title>rng`core::fmt::write (135 samples, 0.43%)</title><rect x="99.5664%" y="261" width="0.4336%" height="15" fill="rgb(210,16,53)"/><text x="99.8164%" y="271.50"></text></g><g><title>rng`core::fmt::float::float_to_decimal_common_shortest (130 samples, 0.42%)</title><rect x="99.5825%" y="245" width="0.4175%" height="15" fill="rgb(235,124,12)"/><text x="99.8325%" y="255.50"></text></g></svg></svg>